import os
import requests
import json
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv

# ============================================================== 
#  Chargement des identifiants depuis le fichier .env 
# ============================================================== 
load_dotenv()

CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SCOPE = os.getenv("SCOPE", "api_offresdemploiv2 o2dsoffre")

TOKEN_URL = "https://entreprise.francetravail.fr/connexion/oauth2/access_token"
API_BASE_URL = "https://api.francetravail.io/partenaire/offresdemploi/v2"

# ============================================================== 
#  Fonctions utilitaires 
# ============================================================== 

def get_token():
    """Obtenir le token d'acc√®s OAuth2"""
    params = {"realm": "/partenaire"}
    data = {
        "grant_type": "client_credentials",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "scope": SCOPE
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    
    print("üîê Authentification en cours...")
    response = requests.post(TOKEN_URL, params=params, data=data, headers=headers)
    
    if response.status_code == 200:
        print("‚úÖ Authentification r√©ussie !")
        return response.json()["access_token"]
    else:
        print(f"‚ùå Erreur d'authentification ({response.status_code}): {response.text}")
        return None

def search_offers(token, keyword, max_results=50):
    """Rechercher des offres par mot-cl√©"""
    url = f"{API_BASE_URL}/offres/search"
    headers = {"Authorization": f"Bearer {token}"}
    all_offers = []
    range_start = 0
    
    print(f"üîç Recherche des offres pour le mot-cl√©: '{keyword}'")

    while range_start < max_results:
        params = {
            "motsCles": keyword,
            "range": f"{range_start}-{range_start + 9}",
            "rome": "M18"  # Domaine informatique
        }
        response = requests.get(url, headers=headers, params=params)
        print(f"  ‚ûú Requ√™te {range_start}-{range_start+9}: {response.status_code}")
        
        if response.status_code in [200, 206]:
            data = response.json()
            offers = data.get("resultats", [])
            if not offers:
                break
            for offer in offers:
                offer["metier_recherche"] = keyword
            all_offers.extend(offers)
            if len(all_offers) >= max_results:
                break
            range_start += 10
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            break
    return all_offers[:max_results]

# ============================================================== 
#  Programme principal 
# ============================================================== 

def main():
    print("D√âMARRAGE DE LA COLLECTE DES OFFRES (brutes)")

    # 1Ô∏è‚É£ Authentification
    token = get_token()
    if not token:
        return

    # 2Ô∏è‚É£ Liste des m√©tiers IT √† rechercher
    metiers_it = [
        "d√©veloppeur", "d√©veloppeur fullstack", "d√©veloppeur backend", "d√©veloppeur frontend",
        "d√©veloppeur mobile", "d√©veloppeur web", "ing√©nieur logiciel", "ing√©nieur informatique",
        "data scientist", "data analyst", "analyste donn√©es", "ing√©nieur data", "data engineer",
        "machine learning", "deep learning", "intelligence artificielle", "analyste big data",
        "architecte data", "scientifique des donn√©es",
        "administrateur syst√®me", "administrateur r√©seau", "devops", "ing√©nieur devops",
        "cloud engineer", "ing√©nieur cloud", "sp√©cialiste cloud", "architecte cloud",
        "administrateur cloud",
        "cybers√©curit√©", "analyste s√©curit√©", "ing√©nieur s√©curit√©", "responsable s√©curit√© informatique",
        "ethical hacker", "pentester",
        "webmaster", "designer UX/UI", "int√©grateur web", "d√©veloppeur javascript",
        "d√©veloppeur python", "d√©veloppeur java", "d√©veloppeur c#", "d√©veloppeur php",
        "administrateur base de donn√©es", "DBA", "ing√©nieur syst√®mes", "technicien informatique",
        "support technique", "helpdesk",
        "chef de projet informatique", "consultant informatique", "product owner", "scrum master",
        "analyste fonctionnel", "testeur QA", "ing√©nieur qualit√© logiciel"
    ]

    # 3Ô∏è‚É£ Collecte brute
    all_offers = []
    for metier in metiers_it:
        offers = search_offers(token, metier, max_results=50)
        if offers:
            all_offers.extend(offers)
            print(f"‚úÖ {len(offers)} offres collect√©es pour '{metier}'")
        else:
            print(f"‚ö† Aucune offre trouv√©e pour '{metier}'")

    # 4Ô∏è‚É£ Sauvegarde brute
    if all_offers:
        os.makedirs('data/raw', exist_ok=True)  # Cr√©er le dossier si n√©cessaire

        json_path = 'data/raw/offres_it_brutes.json'
        csv_path = 'data/raw/offres_it_brutes.csv'

        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(all_offers, f, ensure_ascii=False, indent=2)

        df = pd.DataFrame(all_offers)
        df.to_csv(csv_path, index=False, encoding='utf-8')

        # M√©tadonn√©es de collecte
        metadata = {
            "date_collecte": datetime.now().isoformat(),
            "total_offres": len(df),
            "metiers_recherches": metiers_it
        }
        with open('data/raw/metadata_collecte.json', 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)

        print("\nüíæ Donn√©es brutes sauvegard√©es:")
        print(f"   - {json_path}")
        print(f"   - {csv_path}")
        print("   - data/raw/metadata_collecte.json")
    else:
        print("‚ùå Aucune offre collect√©e.")

if __name__ == "__main__":
    main()
